// <auto-generated />
using System;
using LogStore.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LogStore.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("LogStore.Domain.Entities.Order", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("LogStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<long>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("OrderID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OrderItemTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrderItemTypeID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("LogStore.Domain.Entities.OrderItemType", b =>
                {
                    b.Property<long>("OrderItemTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.HasKey("OrderItemTypeID");

                    b.ToTable("OrderItemType");

                    b.HasData(
                        new
                        {
                            OrderItemTypeID = 1L,
                            Description = "Pizza grande de 8 fatias com um único sabor",
                            Name = "Pizza Grande (8 Fatias)",
                            QuantityProduct = 0
                        },
                        new
                        {
                            OrderItemTypeID = 2L,
                            Description = "Pizza grande de 8 fatias com dois sabores",
                            Name = "Pizza Grande (8 Fatias) - 2 Sabores",
                            QuantityProduct = 2
                        },
                        new
                        {
                            OrderItemTypeID = 3L,
                            Description = "Pizza grande de 4 fatias com um único sabor",
                            Name = "Pizza Broto (4 Fatias)",
                            QuantityProduct = 0
                        },
                        new
                        {
                            OrderItemTypeID = 4L,
                            Description = "Pizza grande de 4 fatias com dois sabaores",
                            Name = "Pizza Broto (4 Fatias) - 2 Sabores",
                            QuantityProduct = 2
                        });
                });

            modelBuilder.Entity("LogStore.Domain.Entities.OrderSubItem", b =>
                {
                    b.Property<long>("OrderSubItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("OrderItemID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductID")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderSubItemID");

                    b.HasIndex("OrderItemID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderSubItem");
                });

            modelBuilder.Entity("LogStore.Domain.Entities.Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1L,
                            Description = "Molho de tomate coberto por três tipo de queijo",
                            Name = "3 Queijos",
                            Value = 50m
                        },
                        new
                        {
                            ProductID = 2L,
                            Description = "Molho de tomate coberto de frango com requeijão",
                            Name = "Frango com Requeijão",
                            Value = 59.99m
                        },
                        new
                        {
                            ProductID = 3L,
                            Description = "Molho de tomate coberto por queijo mussarela",
                            Name = "Mussarela",
                            Value = 42.50m
                        },
                        new
                        {
                            ProductID = 4L,
                            Description = "Molho de tomate coberto por calabresa e cebola",
                            Name = "Calabresa",
                            Value = 42.50m
                        },
                        new
                        {
                            ProductID = 5L,
                            Description = "Molho de tomate coberto por pepperoni",
                            Name = "Pepperoni",
                            Value = 55m
                        },
                        new
                        {
                            ProductID = 6L,
                            Description = "Molho de tomate coberto por mussarela, pressunto, ovo e banco",
                            Name = "Portuguesa ",
                            Value = 45m
                        },
                        new
                        {
                            ProductID = 7L,
                            Description = "Molho de tomate coberto por mussarela, Tomate e ervilha",
                            Name = "Veggie  ",
                            Value = 59.99m
                        });
                });

            modelBuilder.Entity("LogStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("LogStore.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogStore.Domain.Entities.OrderItemType", "OrderItemType")
                        .WithMany()
                        .HasForeignKey("OrderItemTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogStore.Domain.Entities.OrderSubItem", b =>
                {
                    b.HasOne("LogStore.Domain.Entities.OrderItem", "OrderItem")
                        .WithMany("Products")
                        .HasForeignKey("OrderItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
